plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
    implementation 'org.testng:testng:7.10.2'
    implementation group: 'io.rest-assured', name: 'rest-assured', version: '5.5.0'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.9'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.26.0'
    implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.9.2'
    implementation 'com.opencsv:opencsv:5.7.1'

    testImplementation 'io.qameta.allure:allure-testng:2.21.0'
    testImplementation 'io.qameta.allure:allure-rest-assured:2.21.0'
}

test {
    useTestNG()

    // Указываем папку для хранения результатов Allure
    systemProperty "allure.results.directory", "build/allure-results"

    finalizedBy 'allureReport'
    enabled = false
}

allureReport {
    dependsOn test
    reportDir = file('build/allure-report')
}

def registerTask(String taskName, String suitePath) {
    tasks.register(taskName, Test) {
        useTestNG() {
            suites suitePath
        }
        if (project.hasProperty('browser')) {
            systemProperty 'browser', "${browser}"
        }

        // Указываем папку для хранения результатов Allure
        systemProperty "allure.results.directory", "build/allure-results"
    }
}

// Регистрация кастомных задач smoke и regressive
registerTask('smoke', 'src/test/resources/suites/smoke.xml')
registerTask('regression', 'src/test/resources/suites/regression.xml')

// Привязка кастомных задач к генерации отчета Allure
tasks.named('smoke') {
    finalizedBy 'allureReport'
}

tasks.named('regression') {
    finalizedBy 'allureReport'
}

// Задача для вывода ссылки на отчет
tasks.register("printAllureReportUrl") {
    doLast {
        println "\nAllure report generated. Open it by running the following command:\n"
        println "allure serve build/allure-results"
    }
}

// Привязка вывода ссылки к завершению задачи allureReport
tasks.named('allureReport') {
    finalizedBy 'printAllureReportUrl'
}


